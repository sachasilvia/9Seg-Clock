/* 
 *
 * By Sacha Silvia
 * Since 12/12/24
 * For 9-Segment LED Clock (Running an ESP32)
 * Program written in Arduino
 *
 * Credits to Rui Santos for original Date and Time retrieval from an NTP Server
 *   â†ª https://randomnerdtutorials.com/esp32-ntp-client-date-time-arduino-ide/
 */

/* LED Map
0  -  0    0  -  0    x    0  -  0    0  -  0
|  x  |    |  x  |    |    |  x  |    |  x  | 
0  -  0    0  -  0    x    0  -  0    0  -  0
|  x  |    |  x  |    |    |  x  |    |  x  |
0  -  0    0  -  0    x    0  -  0    0  -  0

4  5 14   19 20 29    60    34 35 44   49 50 59
3  6 13   18 21 28    61    33 36 43   48 51 58
2  7 12   17 22 27    62    32 37 42   47 52 57
1  8 11   16 23 26    63    31 38 41   46 53 56
0  9 10   15 24 25    64    30 39 40   45 54 55
*/

// Import Libraries
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <WiFi.h>
#include <Adafruit_NeoPixel.h>

// Define param vals
#define EST -18000  // Offset from GMT (sec)
#define DELAY 1000
#define PIN 13        // Set NPXL to ESP pin
#define NUMPIXELS 65  // Total LEDs
#define MARCH 3
#define NOVEMBER 11

// Declare global vars
int h;
int m;
int month;
int day;
int weekday;
int lastSunday;
int firstSunday;
bool isDST;
String formattedDate;
String StringMonth;
String StringDay;

// Initialize global vars
const char* ssid = "TP-Link_51CA";    // Router SSID
const char* password = "password";    // Router password
const long utcOffsetInSeconds = EST;  // Set Timezone

// Create objects (sourced from libs)
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", utcOffsetInSeconds);  // Time Getter
Adafruit_NeoPixel pixels(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);    // NPXL

/*
These methods identify a given range of LEDs and assigns them color values (inclusive)
Call the function via: setLed(int) or setLed(int, int);
*/
void setLed(int sStart, int sEnd) {
  for (int sPixel = sStart; sPixel <= sEnd; sPixel++) {
    pixels.setPixelColor(sPixel, pixels.Color(255, 255, 100));
  }
}

void setLed(int sStart) {
  pixels.setPixelColor(sStart, pixels.Color(255, 255, 100));
}

/*
This method identifies a given range of LEDs "and turns them off" (inclusive)
Call the function via: clearLed(int,int);
*/
void clearLed(int cStart, int cEnd) {
  for (int cPixel = cStart; cPixel <= cEnd; cPixel++) {
    pixels.setPixelColor(cPixel, pixels.Color(0, 0, 0));
  }
}

/*
This method identifies a face (1-4) on the clock and clears it via clearLed
Call the function via clearFace(int);
*/
void clearFace(int face) {
  if (face == 1) {
    clearLed(0, 14);
  } else if (face == 2) {
    clearLed(15, 29);
  } else if (face == 3) {
    clearLed(30, 44);
  } else if (face == 4) {
    clearLed(45, 59);
  }
}

/*
This method draws a colon on the clock and takes no parameters
Call the function via drawColon();
*/
void drawColon() {
  setLed(63);
  setLed(61);
}

/*
This method draws a number (given) on a face (given) using switch states as the arguemnt for what number to draw
Call the function via drawDigit(int, int);
*/
void drawDigit(int digit, int face) {
  clearFace(face);
  int startPixel = (face - 1) * 15;  // Assuming each face has 15 LEDs allocated.
  switch (digit) {
    case 0:  //Draw 0 ... up to case 9
      setLed(startPixel + 0, startPixel + 5);
      setLed(startPixel + 9, startPixel + 14);
      break;
    case 1:
      setLed(startPixel + 10, startPixel + 14);
      break;
    case 2:
      setLed(startPixel + 4, startPixel + 5);
      setLed(startPixel + 12, startPixel + 14);
      setLed(startPixel + 0, startPixel + 2);
      setLed(startPixel + 9, startPixel + 10);
      setLed(startPixel + 7);
      break;
    case 3:
      setLed(startPixel + 9, startPixel + 14);
      setLed(startPixel + 4, startPixel + 5);
      setLed(startPixel + 0);
      setLed(startPixel + 2);
      setLed(startPixel + 7);
      break;
    case 4:
      setLed(startPixel + 2, startPixel + 4);
      setLed(startPixel + 10, startPixel + 14);
      setLed(startPixel + 7);
      break;
    case 5:
      setLed(startPixel + 2, startPixel + 5);
      setLed(startPixel + 9, startPixel + 12);
      setLed(startPixel + 0);
      setLed(startPixel + 7);
      setLed(startPixel + 14);
      break;
    case 6:
      setLed(startPixel + 0, startPixel + 5);
      setLed(startPixel + 9, startPixel + 12);
      setLed(startPixel + 7);
      setLed(startPixel + 14);
      break;
    case 7:
      setLed(startPixel + 3, startPixel + 5);
      setLed(startPixel + 10, startPixel + 14);
      break;
    case 8:
      setLed(startPixel + 0, startPixel + 5);
      setLed(startPixel + 9, startPixel + 14);
      setLed(startPixel + 7);
      break;
    case 9:
      setLed(startPixel + 10, startPixel + 14);
      setLed(startPixel + 2, startPixel + 5);
      setLed(startPixel + 7);
      break;
  }
}

//This method runs once
void setup() {

  Serial.begin(115200);                            // Start console at needed baud rate
  Serial.print("Establishing connection with: ");  // Print confirmation
  Serial.println(ssid);
  WiFi.begin(ssid, password);  // Start WiFi
  // Loop until connection
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("");
  Serial.print("Successfully connected to: ");  // Print success message
  Serial.println(ssid);
  timeClient.begin();  // Get time

  pixels.begin();      // Create pixels
  pixels.clear();      // Wipe pixel data

  drawColon();         // Draw permanent colon
}

// This method is an inf. loop
void loop() {

  timeClient.update();  // Re-check time

  //Assign variables for daylight savings formula based on the updated time
  formattedDate = timeClient.getFormattedDate();
  StringMonth = formattedDate.substring(5, 7);
  StringDay = formattedDate.substring(8, 10);
  month = StringMonth.toInt();
  day = StringDay.toInt();
  weekday = timeClient.getDay();
  lastSunday = day - weekday;
  firstSunday = weekday - day;

  // Set (and reset) time to vars based on daylight savings formula
  if (((month > MARCH) && (month < NOVEMBER))
      || ((month == MARCH) && (lastSunday >= 8))
      || ((month == MARCH) && (day > 14))
      || ((month == NOVEMBER) && (firstSunday >= 0) && (day <= 7))) {
    h = timeClient.getHours() + 1;
    isDST == true;
  } else {
    h = timeClient.getHours();
    isDST == false;
  }
  m = timeClient.getMinutes();

  // Special cases for 24 Hr clock corrections
  if (h == 0) {
    h = 12;
  } else if (h > 12) {
    h -= 12;
  }

  //Draw digit of time on each face
  drawDigit(h / 10, 1);
  drawDigit(h % 10, 2);
  drawDigit(m / 10, 3);
  drawDigit(m % 10, 4);

  pixels.show(); // Update pixels

  Serial.print(h);
  Serial.print(":");
  Serial.println(m);
  Serial.print("Is it Daylight Savings?  ");
  Serial.println(isDST);

  delay(DELAY); // Time check update speed
}
